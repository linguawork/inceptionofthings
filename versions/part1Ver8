#this is the 8th version of the vagrantfile. The token is transmitted via file. It works
#Got only two error messages: 
# (I am not sure if this is an error, but it is in red)
#areggieS: Created symlink /etc/systemd/system/multi-user.target.wants/k3s.service → /etc/systemd/system/k3s.service.

#the message is repeated with:
# areggieSW: Created symlink /etc/systemd/system/multi-user.target.wants/k3s-agent.service → /etc/systemd/system/k3s-agent.service.
# areggieSW: [INFO]  systemd: Starting k3s-agent (this one is not finishing)

Vagrant.configure("2") do |config|
  # Define the first virtual machine (Server)
  config.vm.define "areggieS" do |server|
    server.vm.hostname = "areggieS"
    server.vm.box = "ubuntu/jammy64"
    server.vm.network "private_network", ip: "192.168.56.110"
    
    server.vm.provider "virtualbox" do |vb|
      vb.memory = "512"
      vb.cpus = 1
    end

    server.vm.provision "shell", inline: <<-SHELL
      curl -sfL https://get.k3s.io | sh -
      cat /var/lib/rancher/k3s/server/node-token > /vagrant/k3s_token.txt
    SHELL
  end

  # Define the second virtual machine (ServerWorker)
  config.vm.define "areggieSW" do |worker|
    worker.vm.hostname = "areggieSW"
    worker.vm.box = "ubuntu/jammy64"
    worker.vm.network "private_network", ip: "192.168.56.111"
    
    worker.vm.provider "virtualbox" do |vb|
      vb.memory = "512"
      vb.cpus = 1
    end

    worker.vm.provision "shell", inline: <<-SHELL
      echo "Fetching K3s token from server"
      export K3S_URL=https://192.168.56.110:6443
      
      # Wait until the server is ready
      while ! nc -z 192.168.56.110 6443; do
        sleep 1
      done

      export K3S_TOKEN=$(cat /vagrant/k3s_token.txt)
      echo "K3S_URL is $K3S_URL"
      echo "K3S_TOKEN is $K3S_TOKEN"
      
      # Install K3s in agent mode
      curl -sfL https://get.k3s.io | K3S_URL=$K3S_URL K3S_TOKEN=$K3S_TOKEN sh -
      
      # Set KUBECONFIG
      export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
      
      # Verify kubectl can access the cluster
      kubectl get nodes
    SHELL
  end
end
