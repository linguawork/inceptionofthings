# apiVersion - структура данных и правила (как документ-форма по которой ведут запись): https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/
apiVersion: apps/v1 #apps/v1 - версия формы (структуры данных и правил), здесь это название версии группы объектов, в которой есть  Deployment (Управляет созданием и обновлением Pod'ов. Определяет сколько экземпляров приложения запустить.)
#https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/
kind: Deployment #явное указание на объект из группы объектов по одной версии
metadata: #https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
  name: deploy-app1 #личное имя объекта. name: a string that uniquely identifies this object within the current namespace (see the identifiers docs). This value is used in the path when retrieving an individual object.
  #namespace: a namespace is a DNS compatible label that objects are subdivided into. The default namespace is 'default'. See the namespace docs for more.
  labels: 
    app: deploy-app1 #a map of string keys and values that can be used to organize and categorize objects (через команды, потом можно фильтровать)
spec: #Spec: Описывает желаемое состояние объекта. https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/#DeploymentSpec
      #Включает настройки, которые задал пользователь, значения по умолчанию, параметры, изменённые другими компонентами (например, scheduler).
      #Сохраняется в стабильном хранилище (и остаётся до удаления).
      #Если удалить spec — объект удаляется из системы.
  selector: #Это селектор меток (labels) — критерии выбора Pod'ов, которыми управляет Deployment. https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/#DeploymentSpec
    #Deployment будет контролировать только те Pod'ы, метки которых соответствуют селектору
    #!!!Селектор должен совпадать с метками (labels), указанными в шаблоне Pod'а (template.metadata.labels).
      #selector.matchLabels = какие Pod'ы выбирать для управления.
    matchLabels:
      app: app1 #«Я управляю всеми Pod'ами, у которых стоит метка app: app1.»
  #https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates
  template: #Это шаблон Pod'а, который будет использоваться для создания новых Pod'ов.
      #template.metadata.labels = какие метки ставить на создаваемые Pod'ы.
    metadata:
      labels:
      #!!!Селектор должен совпадать с метками (labels), указанными в шаблоне Pod'а (template.metadata.labels).
        app: app1
        #спецификации шаблона
    spec:
      containers:
      - name: app1
        image: nginx:stable
        ports:
        - containerPort: 80
        volumeMounts:
        - name: app1-volume
          mountPath: /usr/share/nginx/html
      #https://kubernetes.io/docs/concepts/storage/volumes/
      volumes:
      - name: app1-volume
        hostPath:
          path: /vagrant/rsc/app1
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-app2
  labels:
    app: deploy-app2
spec:
  replicas: 3 #number of pods to be created
  selector:
    matchLabels:
      app: app2
  template:
    metadata:
      labels:
        app: app2
    spec:
      containers:
      - name: app2
        image: nginx:stable
        ports:
        - containerPort: 80
        volumeMounts:
        - name: app2-volume
          mountPath: /usr/share/nginx/html
      volumes:
      - name: app2-volume
        hostPath:
          path: /vagrant/rsc/app2

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-app3
  labels:
    app: deploy-app3
spec:
  selector:
    matchLabels:
      app: app3
  template:
    metadata:
      labels:
        app: app3
    spec:
      containers:
      - name: app3
        image: nginx:stable
        ports:
        - containerPort: 80
        volumeMounts:
        - name: app3-volume
          mountPath: /usr/share/nginx/html
      volumes:
      - name: app3-volume
        hostPath:
          path: /vagrant/rsc/app3

---
#SERVICE objects, one for each DEPLOYMENT OBJECT

apiVersion: v1
kind: Service
metadata:
  name: svc-app1
spec:
  selector:
    app: app1
  ports:
    - protocol: TCP
      port: 8080 #incoming connections
      targetPort: 80 #port to connect inside pods

#Service предоставляет стабильную точку входа для доступа к Pod'ам, так как IP-адрес Pod'ов может изменяться, но Service будет иметь постоянный IP-адрес.
#Service работает как прокси, принимая трафик на определенном порту и перенаправляя его на целевые порты соответствующих Pod'ов.


---

apiVersion: v1
kind: Service
metadata:
  name: svc-app2
spec:
  selector:
    app: app2
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 80

---

apiVersion: v1
kind: Service
metadata:
  name: svc-app3
spec:
  selector:
    app: app3
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 80

---
#ingress: to access different web pages via one IP address

apiVersion: networking.k8s.io/v1
# Ingress в Kubernetes отвечает за маршрутизацию внешнего HTTP(S) трафика в соответствующие сервисы внутри кластера.
kind: Ingress
metadata:
#это имя Ingress объекта. Оно используется для ссылки на этот объект внутри кластера Kubernetes.
  name: ingress-apps
spec:
  rules: #определяют, как маршрутизировать трафик. Здесь указано, что правило будет работать для запросов, которые приходят на домен app1.com.
  - host: app1.com # это домен, который будет использоваться для маршрутизации. Все запросы, направленные на app1.com, будут обрабатываться этим правилом. Например, если пользователь откроет браузер и перейдет по адресу http://app1.com, это правило будет применяться.
    http: # указывает, что это правило касается HTTP-запросов.
      paths: # это список путей, для которых будет применяться это правило маршрутизации. В данном случае есть один путь:
      - path: / #это путь, с которого будет начинаться маршрутизация. В данном случае это корневой путь ("/"), что означает, что все запросы, начинающиеся с http://app1.com/, будут обрабатываться по этому правилу.
        pathType: Prefix # Prefix — это тип пути. Prefix означает, что маршрут будет применяться ко всем путям, которые начинаются с указанного пути. То есть любой запрос с путем /, например http://app1.com/test или http://app1.com/anything, будет обработан этим правилом.
        backend: #указывает, на какой сервис будет направляться трафик.
          service:
            name: svc-app1 #это имя Service, на который будет направляться трафик. В данном случае это сервис с именем svc-app1.
            port:
              number: 8080 #это порт на сервисе, куда будет перенаправлен трафик. В данном случае трафик будет направляться на порт 8080 сервиса svc-app1.
  - host: app2.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: svc-app2
            port:
              number: 8080
  - host: app3.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: svc-app3
            port:
              number: 8080
  - host: #default
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: svc-app3
            port:
              number: 8080
